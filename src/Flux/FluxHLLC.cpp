#include "FluxHLLC.h"
#include "Integrator.h"

//–ö–û–ù–°–¢– –£–ö–¢–û–  HLLC
FluxHLLC::FluxHLLC(const BaseParams& prm, Problem& prb, SoundVelType soundvel) : Flux(prm, prb), SoundVel(soundvel)
{
    int nx = ptrprm->nx;

    //–ó–∞–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–¥ L
    L.resize(nx + 1);
    for (int row = 0; row < nx + 1; ++row)
    {
        L[row].resize(2);
    }

    //–ó–∞–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ) –≤–µ–∫—Ç–æ—Ä—ã
    LdUast.resize(5), RdUast.resize(5), hllcL.resize(5), hllcR.resize(5), UastL.resize(5), UastR.resize(5);
}

//–î–ï–°–¢– –£–ö–¢–û–  HLLC
FluxHLLC::~FluxHLLC()
{};


void FluxHLLC::getUast(const int cell, const double Sast, \
	const vector<vector<double>>& leftsol, \
	const vector<vector<double>>& mysol, \
	vector<double>& Uast)
{
    if (Sast >= 0)
    {
		double mnog = side_val(leftsol, var::r, side::right) * \
			(L[cell][0] - side_val(leftsol, var::vx, side::right)) / (L[cell][0] - Sast);
        
        Uast[0] = 1.0;
        Uast[1] = Sast;
		Uast[2] = side_val(leftsol, var::vy, side::right);
		Uast[3] = side_val(leftsol, var::vz, side::right);
		Uast[4] = side_val(leftsol, var::e, side::right) / side_val(leftsol, var::r, side::right) + \
			(Sast - side_val(leftsol, var::vx, side::right))* \
			(Sast + side_val(leftsol, var::p, side::right) / \
			(side_val(leftsol, var::r, side::right)*(L[cell][0] - side_val(leftsol, var::vx, side::right))));

        for (int val = 0; val < 5; ++val)
            Uast[val] *= mnog;
    }
    else //if Sast < 0
    {
        double mnog = side_val(mysol, var::r, side::left) * \
			(L[cell][1] - side_val(mysol, var::vx, side::left)) / (L[cell][1] - Sast);

        Uast[0] = 1.0;
        Uast[1] = Sast;
		Uast[2] = side_val(mysol, var::vy, side::left);
		Uast[3] = side_val(mysol, var::vz, side::left);
		Uast[4] = side_val(mysol, var::e, side::left) / side_val(mysol, var::r, side::left) + \
			(Sast - side_val(mysol, var::vx, side::left))* \
			(Sast + side_val(mysol, var::p, side::left) / \
			(side_val(mysol, var::r, side::left)*(L[cell][1] - side_val(mysol, var::vx, side::left))));
        
        for (int val = 0; val < 5; ++val)
            Uast[val] *= mnog;
    }//end else
}


double FluxHLLC::getSast(const int cell, \
	const vector<vector<double>>& leftsol, \
	const vector<vector<double>>& mysol)
{
	return (side_val(mysol, var::p, side::left) - side_val(leftsol, var::p, side::right) + \
		side_val(leftsol, var::rvx, side::right) * (L[cell][0] - side_val(leftsol, var::vx, side::right)) - \
		side_val(mysol, var::rvx, side::left) * (L[cell][1] - side_val(mysol, var::vx, side::left))) / \
		(side_val(leftsol, var::r, side::right) * (L[cell][0] - side_val(leftsol, var::vx, side::right)) - \
		side_val(mysol, var::r, side::left) * (L[cell][1] - side_val(mysol, var::vx, side::left)));
}


void FluxHLLC::step(const vector<vector<vector<double>>>& SOL, \
	vector<vector<vector<double>>>& DSOL, \
	const double cft)
{
    int nx = ptrprm->nx;
    double h = ptrprm->h;
	int dim = ptrprb->dim;

	//–ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–≤–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
	ptrprb->convFlux(SOL);

	

    //–ù–∞—Ö–æ–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
	ptrprb_toGas->lambda(SOL, SoundVel, L, { 0, dim - 1 });
    
    //–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —è—á–µ–π–∫–∞–º
	for (int cell = 0; cell < nx; ++cell)
	{
		//–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç—Ä–µ—Ö —è—á–µ–π–∫–∞—Ö	:
		//  myu(), myv() - –Ω–∞ —Å–≤–æ–µ–π —è—á–µ–π–∫–µ
		//  leftu(), leftv() - –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–π —Å–ª–µ–≤–∞ —è—á–µ–π–∫–µ
		//  rightu(), rightv() - –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–π —Å–ø—Ä–∞–≤–∞ —è—á–µ–π–∫–µ 
		//–∏ –Ω–∞ –∫–æ–Ω–≤.–ø–æ—Ç–æ–∫–∏ –Ω–∞ —Ç—Ä–µ—Ö —è—á–µ–π–∫–∞—Ö:
		//  myflux(), myfluxL(), myfluxR() - –∫–æ–Ω–≤.–ø–æ—Ç–æ–∫–∏ –Ω–∞ —Å–≤–æ–µ–π —è—á–µ–π–∫–µ (–ø–æ —Ü–µ–Ω—Ç—Ä—É, —Å–ª–µ–≤–∞, —Å–ø—Ä–∞–≤–∞)
		//  rightfluxL(), leftfluxR() - –∫–æ–Ω–≤.–ø–æ—Ç–æ–∫–∏ –Ω–∞ –ø—Ä–∞–≤–æ–π –∏ –ª–µ–≤–æ–π —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö (—Å–ª–µ–≤–∞, —Å–ø—Ä–∞–≤–∞)
		setlocsolflux(SOL, cell);

		/*
		if (fabs(L[cell][1]) < 1e-10)
		L[cell][1] = 0.0;

		if (fabs(L[cell+1][1]) < 1e-10)
		L[cell+1][1] = 0.0;
		*/

		/*
		if ((L[cell][1]) < 0)
		{
		cout << cell << " " << L[cell][1] << endl;
		cin.get();
		}
		*/

		double SastL = getSast(cell, leftsol(), mysol());
		double SastR = getSast(cell + 1, mysol(), rightsol());

		getUast(cell, SastL, leftsol(), mysol(), UastL);
		getUast(cell + 1, SastR, mysol(), rightsol(), UastR);

		//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∞
		if (L[cell][0] > 0)
		for (size_t val = 0; val < dim; ++val)
			hllcL[val] = leftfluxR()[val];
		else
		if (SastL >= 0)
		for (size_t val = 0; val < dim; ++val)
		{
			LdUast[val] = UastL[val] - side_val(leftsol(), (var)val, side::right);
			hllcL[val] = leftfluxR()[val] + L[cell][0] * LdUast[val];
		}
		else
		if (L[cell][1] > 0)
		for (size_t val = 0; val < dim; ++val)
		{
			LdUast[val] = UastL[val] - side_val(mysol(), (var)val, side::left);
			hllcL[val] = myfluxL()[val] + L[cell][1] * LdUast[val];
		}
		else
		for (size_t val = 0; val < dim; ++val)
			hllcL[val] = myfluxL()[val];


		//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∞
		if (L[cell + 1][0] > 0)
		for (size_t val = 0; val < dim; ++val)
			hllcR[val] = myfluxR()[val];
		else
		if (SastR >= 0)
		for (size_t val = 0; val < dim; ++val)
		{
			RdUast[val] = UastR[val] - side_val(mysol(), (var)val, side::right);
			hllcR[val] = myfluxR()[val] + L[cell + 1][0] * RdUast[val];
		}
		else
		if (L[cell + 1][1] > 0)
		for (size_t val = 0; val < dim; ++val)
		{
			RdUast[val] = UastR[val] - side_val(rightsol(), (var)val, side::left);
			hllcR[val] = rightfluxL()[val] + L[cell + 1][1] * RdUast[val];
		}
		else
		for (size_t val = 0; val < dim; ++val)
			hllcR[val] = rightfluxL()[val];


		int ngp = 3;
		Integrator GP(IntegrPoints::Gauss, ngp);
		
		function<vector<double>(double)> flx = [&](double x) {return ptrprb->getFlux(ptrprb->gauss_val(mysol(), x));};
		
        vector<double> intFL1 = GP.integrate([&](double pts) {return flx(pts)*2.0;}, dim);
        vector<double> intFL2 = GP.integrate([&](double pts) {return flx(pts)*6.0*pts;}, dim);0;
				
        //–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ—Ç–æ–∫–∏
        for (size_t val = 0; val < 5; ++val)
        {
            DSOL[cell][0][val] = -(cft / h) * (hllcR[val] - hllcL[val]);
            DSOL[cell][1][val] = -3.0*(cft / h) * (-intFL1[val] + hllcR[val] + hllcL[val]);		

			if (ptrprb->nshape > 2)
				DSOL[cell][2][val] = -5.0*(cft / h) * (-intFL2[val] + hllcR[val] - hllcL[val]);
        }
    }
}
